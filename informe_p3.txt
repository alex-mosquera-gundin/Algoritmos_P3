------------------------------------
|  TÍTULO: Practica 3 Algoritmos   |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 
AUTOR1: Alex Mosquera Gundin      LOGIN1: alex.mosquera@udc.es 
AUTOR2: Heros Vicente Gonzalez    LOGIN2: heros.vicente@udc.es
GRUPO: 2.2 
FECHA: 11/11/2023
 
 
------------------------------------
|   CARACTERÍSTICAS DEL EQUIPO:    | 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 
Lenovo ThinkBook 15 G2 ITL 
Memoria RAM: 8.0 Gib 
Procesador: 11th Gen Intel(R) Core(TM) i3-1115G4 @ 3.00GHz
Sistema Operativo: Ubuntu 22.04.3 LTS
Arquitectura: 64 bits
 
 
-----------------------------------
|        INTRODUCCIÓN             |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 
La practica 3 consiste en analizar la complejidad computacional de la creaciñon de un monticulo de mínimos a partir de un vector y la ordenacion por monticulos. 
En la práctica, distinguiremos tres casos diferenciados: que el vector este inicializado en orden ascendente, que el vector este inicializado en orden descendente, y que 
el vector este inicializado sin orden.
 
 
-----------------------------------
|     INFORME DE LA PRÁCTICA      |
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 
El tiempo se mide en microsegundos.
 
(*) -> El asterisco indica que el tiempo de ejecucion es menor a 500 microsegundos (nuestro umbral de confianza), por lo que se repite el algoritmo K veces.
       En caso de (*) repetiremos el algoritmo un total de K = 1000 veces.
 

Algoritmo -- Crear monticulo

Cota subestimada:    n^0.8 
Cota ajustada:       O(n) 
Cota sobreestimada:  n^1.2

Crear monticulo con inicializacion ascendente:

		      n			      t(n)		  t(n)/n^0.8		    t(n)/n^1		  t(n)/n^1.2
(*)		    500		         6.524		0.0452207696		0.0130480000		0.0037648697
(*)		   1000		         6.952		0.0276764105		0.0069520000		0.0017462634
(*)		   2000		         8.017		0.0183310730		0.0040085000		0.0008765484
(*)		   4000		        16.666		0.0218868562		0.0041665000		0.0007931574
(*)		   8000		        32.106		0.0242166582		0.0040132500		0.0006650866
(*)		  16000		        63.416		0.0274727959		0.0039635000		0.0005718141
(*)		  32000		       127.219		0.0316542476		0.0039755937		0.0004993120
(*)		  64000		       249.107		0.0355993405		0.0038922969		0.0004255690
		 128000		       556.000		0.0456359206		0.0043437500		0.0004134498
		 256000		      1098.000		0.0517619189		0.0042890625		0.0003553975


    OBSERVACIONES: La cota ajustada para este caso tiende a 0.0042890625.  


Crear monticulo con inicializacion desordenada:

		      n			      t(n)		  t(n)/n^0.8		    t(n)/n^1		  t(n)/n^1.2
(*)		    500		         4.396		0.0304706473		0.0087920000		0.0025368435
(*)		   1000		         9.225		0.0367253865		0.0092250000		0.0023172152
(*)		   2000		        17.716		0.0405080815		0.0088580000		0.0019370003
(*)		   4000		        35.349		0.0464225657		0.0088372500		0.0016823066
(*)		   8000		        82.677		0.0623609496		0.0103346250		0.0017126820
(*)		  16000		       195.407		0.0846533465		0.0122129375		0.0017619604
(*)		  32000		       430.520		0.1071206869		0.0134537500		0.0016897146
		  64000		       900.000		0.1286170459		0.0140625000		0.0015375404
		 128000		      1801.000		0.1478242680		0.0140703125		0.0013392503
		 256000		      3534.000		0.1665998373		0.0138046875		0.0011438750

    OBSERVACIONES: La cota ajustada para este caso tiende a 0.0138046875.


Crear monticulo con inicializacion descendente:

		      n			      t(n)		  t(n)/n^0.8		    t(n)/n^1		  t(n)/n^1.2
(*)		    500		         5.167		0.0358147940		0.0103340000		0.0029817722
(*)		   1000		         9.135		0.0363670900		0.0091350000		0.0022946083
(*)		   2000		        19.725		0.0451017107		0.0098625000		0.0021566567
(*)		   4000		        39.436		0.0517898752		0.0098590000		0.0018768124
(*)		   8000		        78.727		0.0593815751		0.0098408750		0.0016308564
(*)		  16000		       155.725		0.0674624879		0.0097328125		0.0014041528
(*)		  32000		       312.979		0.0778744901		0.0097805938		0.0012283870
		  64000		       644.000		0.0920326417		0.0100625000		0.0011001956
		 128000		      1313.000		0.1077697190		0.0102578125		0.0009763663
		 256000		      2595.000		0.1223334968		0.0101367188		0.0008399422


    OBSERVACIONES: La cota ajustada para este caso tiende a 0.0101367188.


Algoritmo -- Ordenacion por monticulos:


Cota subestimada:   n^1 
Cota ajustada:      O(nlogn) 
Cota sobreestimada: n^1.5 


Ordenacion por monticulos con inicializacion ascendente:

		      n			      t(n)		    t(n)/n^1		t(n)/nlog(n)		  t(n)/n^1.5
(*)		    500		        24.512		0.0490240000		0.0078885103		0.0021924199
(*)		   1000		        69.884		0.0698840000		0.0101167452		0.0022099261
(*)		   2000		       163.390		0.0816950000		0.0107480658		0.0018267557
(*)		   4000		       359.751		0.0899377500		0.0108436474		0.0014220407
		   8000		       787.000		0.0983750000		0.0109461272		0.0010998659
		  16000		      1622.000		0.1013750000		0.0104722518		0.0008014397
		  32000		      3435.000		0.1073437500		0.0103478904		0.0006000698
		  64000		      7365.000		0.1150781250		0.0103986523		0.0004548862
		 128000		     15782.000		0.1232968750		0.0104846193		0.0003446252
		 256000		     32423.000		0.1266523438		0.0101704833		0.0002503187

    OBSERVACIONES: La cota ajustada para este caso tiende a 0.0101704833. 


Ordenacion por monticulos con inicializacion desordenada:

		      n			      t(n)		    t(n)/n^1		t(n)/nlog(n)		  t(n)/n^1.5
(*)		    500		        28.203		0.0564060000		0.0090763567		0.0025225530
(*)		   1000		        78.280		0.0782800000		0.0113321907		0.0024754310
(*)		   2000		       190.805		0.0954025000		0.0125514701		0.0021332648
(*)		   4000		       432.221		0.1080552500		0.0130280448		0.0017085035
		   8000		       988.000		0.1235000000		0.0137417709		0.0013807720
		  16000		      2142.000		0.1338750000		0.0138295705		0.0010583748
		  32000		      4478.000		0.1399375000		0.0134899136		0.0007822744
		  64000		      9765.000		0.1525781250		0.0137872152		0.0006031180
		 128000		     20835.000		0.1627734375		0.0138415311		0.0004549656
		 256000		     44817.000		0.1750664063		0.0140582472		0.0003460054

    OBSERVACIONES: La cota ajustada para este caso tiende a 0.0140582472. 


Ordenacion por monticulos con inicializacion descendente:

		      n			      t(n)		    t(n)/n^1		t(n)/nlog(n)		  t(n)/n^1.5
(*)		    500		        28.171		0.0563420000		0.0090660584		0.0025196908
(*)		   1000		        74.940		0.0749400000		0.0108486762		0.0023698109
(*)		   2000		       176.245		0.0881225000		0.0115936891		0.0019704790
(*)		   4000		       380.271		0.0950677500		0.0114621631		0.0015031531
		   8000		       838.000		0.1047500000		0.0116554697		0.0011711406
		  16000		      1766.000		0.1103750000		0.0114019708		0.0008725910
		  32000		      3418.000		0.1068125000		0.0102966782		0.0005971000
		  64000		      7732.000		0.1208125000		0.0109168201		0.0004775533
		 128000		     16099.000		0.1257734375		0.0106952152		0.0003515474
		 256000		     33193.000		0.1296601562		0.0104120177		0.0002562634

    OBSERVACIONES: La cota ajustada para este caso tiende a 0.0104120177. 

 
-----------------------------------
|        CONCLUSION               |
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
En conclusion, la ordenacion por monticulos es un algoritmo de ordenacion con una complejidad computacional lo bastante eficiente para lo facil de implementar que resulta 
si se dispone de una libreria que implemente el TAD monticulo. 

En el peor caso, el tiempo que tarda en ejecutar n/2 hundimientos va a ser la suma desde k = 1 hasta k = n/2 de log(k), lo cual tiende a ser directamente proporcional a n, por lo que lacomplejidad en el peor caso va a ser O(n)

La complejidad de ordenar por monticulos viene dada porque recorremos el vector del monticulo al copiar el vector dado en el de monticulo, que se ejecuta en tiempo O(n), y 
viene dado porque se hacen n hundimientos, de tiempo O(log n), por lo que la complejidad computacional sera O(n + nlog n) = max {n, nlog n} = O(nlog n). 

El algoritmo ordenacion por monticulo parece ser igual de complejo independientemente al estado del vector a ordenar. 

El algoritmo que usamos utiliza un vector auxiliar al monticulo, pero se podria optimizar usando el mismo vector como monticulo, mejorando su complejidad espacial.
 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
