------------------------------------
|  TÍTULO: Practica 3 Algoritmos   |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 
AUTOR1: Alex Mosquera Gundin      LOGIN1: alex.mosquera@udc.es 
AUTOR2: Heros Vicente Gonzalez    LOGIN2: heros.vicente@udc.es
GRUPO: 2.2 
FECHA: 20/10/2023
 
 
------------------------------------
|   CARACTERÍSTICAS DEL EQUIPO:    | 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 
Lenovo ThinkBook 15 G2 ITL 
Memoria RAM: 8.0 Gib 
Procesador: 11th Gen Intel(R) Core(TM) i3-1115G4 @ 3.00GHz
Sistema Operativo: Ubuntu 22.04.3 LTS
Arquitectura: 64 bits
 
 
-----------------------------------
|        INTRODUCCIÓN             |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 
La practica 3 consiste en analizar la complejidad computacional de la ordenacion por monticulos de mínimos de un vector. 
En la práctica, distinguiremos tres casos diferenciados: que el vector este inicializado en orden ascendente, que el vector este inicializado en orden descendente, y que 
el vector este inicializado sin orden.
 
 
-----------------------------------
|     INFORME DE LA PRÁCTICA      |
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 
El tiempo se mide en microsegundos.
 
(*) -> El asterisco indica que el tiempo de ejecucion es menor a 500 microsegundos (nuestro umbral de confianza), por lo que se repite el algoritmo K veces.
       En caso de (*) repetiremos el algoritmo un total de K = 1000 veces.
 


Algoritmo -- Crear monticulo

Crear monticulo con inicializacion ascendente:

		      n			      t(n)		  t(n)/n^0.8		    t(n)/n^1		  t(n)/n^1.2
(*)		    500		         4.155		0.0288001682		0.0083100000		0.0023977672
(*)		   1000		         3.916		0.0155898768		0.0039160000		0.0009836547
(*)		   2000		        10.144		0.0231945122		0.0050720000		0.0011091065
(*)		   4000		        20.189		0.0265134849		0.0050472500		0.0009608217
(*)		   8000		        32.373		0.0244180488		0.0040466250		0.0006706176
(*)		  16000		        63.037		0.0273086072		0.0039398125		0.0005683967
(*)		  32000		       135.880		0.0338092515		0.0042462500		0.0005333049
(*)		  64000		       250.754		0.0358347097		0.0039180312		0.0004283827
		 128000		       548.000		0.0449792887		0.0042812500		0.0004075009
		 256000		      1087.000		0.0512433569		0.0042460937		0.0003518371


Crear monticulo con inicializacion desordenada:

		      n			      t(n)		  t(n)/n^0.8		    t(n)/n^1		  t(n)/n^1.2
(*)		    500		         4.682		0.0324530416		0.0093640000		0.0027018884
(*)		   1000		         9.058		0.0360605475		0.0090580000		0.0022752667
(*)		   2000		        16.926		0.0387017265		0.0084630000		0.0018506246
(*)		   4000		        35.309		0.0463700351		0.0088272500		0.0016804029
(*)		   8000		        79.917		0.0602791588		0.0099896250		0.0016555076
(*)		  16000		       189.968		0.0822970872		0.0118730000		0.0017129176
(*)		  32000		       427.047		0.1062565455		0.0133452188		0.0016760837
		  64000		       911.000		0.1301890320		0.0142343750		0.0015563326
		 128000		      1608.000		0.1319830222		0.0125625000		0.0011957326
		 256000		      3588.000		0.1691455054		0.0140156250		0.0011613536


Crear monticulo con inicializacion descendente:

		      n			      t(n)		  t(n)/n^0.8		    t(n)/n^1		  t(n)/n^1.2
(*)		    500		         4.922		0.0341165892		0.0098440000		0.0028403876
(*)		   1000		        10.204		0.0406228557		0.0102040000		0.0025631289
(*)		   2000		        18.988		0.0434165416		0.0094940000		0.0020760759
(*)		   4000		        39.640		0.0520577811		0.0099100000		0.0018865211
(*)		   8000		        74.955		0.0565364609		0.0093693750		0.0015527181
(*)		  16000		       150.131		0.0650390803		0.0093831875		0.0013537124
(*)		  32000		       311.308		0.0774587169		0.0097283750		0.0012218287
		  64000		       648.000		0.0926042730		0.0101250000		0.0011070291
		 128000		      1297.000		0.1064564551		0.0101328125		0.0009644684
		 256000		      2594.000		0.1222863548		0.0101328125		0.0008396185



Algoritmo -- Ordenacion por monticulos:



Ordenacion por monticulos con inicializacion ascendente:

		      n			      t(n)		    t(n)/n^1		t(n)/nlog(n)		  t(n)/n^1.5
(*)		    500		        26.965		0.0539300000		0.0086779406		0.0024118229
(*)		   1000		        70.047		0.0700470000		0.0101403419		0.0022150806
(*)		   2000		       164.771		0.0823855000		0.0108389103		0.0018421958
(*)		   4000		       360.070		0.0900175000		0.0108532627		0.0014233016
		   8000		       777.000		0.0971250000		0.0108070405		0.0010858905
		  16000		      1625.000		0.1015625000		0.0104916210		0.0008029221
		  32000		      3438.000		0.1074375000		0.0103569279		0.0006005939
		  64000		      7292.000		0.1139375000		0.0102955836		0.0004503775
		 128000		     16049.000		0.1253828125		0.0106619982		0.0003504556
		 256000		     32732.000		0.1278593750		0.0102674107		0.0002527043


Ordenacion por monticulos con inicializacion desordenada:

		      n			      t(n)		    t(n)/n^1		t(n)/nlog(n)		  t(n)/n^1.5
(*)		    500		        28.971		0.0579420000		0.0093235163		0.0025912450
(*)		   1000		        77.640		0.0776400000		0.0112395412		0.0024551924
(*)		   2000		       191.325		0.0956625000		0.0125856766		0.0021390785
(*)		   4000		       431.639		0.1079097500		0.0130105021		0.0017062030
		   8000		       989.000		0.1236250000		0.0137556796		0.0013821695
		  16000		      2116.000		0.1322500000		0.0136617046		0.0010455281
		  32000		      4612.000		0.1441250000		0.0138935868		0.0008056832
		  64000		      9692.000		0.1514375000		0.0136841464		0.0005986093
		 128000		     21471.000		0.1677421875		0.0142640516		0.0004688537
		 256000		     45076.000		0.1760781250		0.0141394906		0.0003480050


Ordenacion por monticulos con inicializacion descendente:

		      n			      t(n)		    t(n)/n^1		t(n)/nlog(n)		  t(n)/n^1.5
(*)		    500		        30.386		0.0607720000		0.0097788950		0.0027178065
(*)		   1000		        77.342		0.0773420000		0.0111964013		0.0024457688
(*)		   2000		       176.045		0.0880225000		0.0115805328		0.0019682429
(*)		   4000		       379.807		0.0949517500		0.0114481772		0.0015013190
		   8000		       839.000		0.1048750000		0.0116693783		0.0011725381
		  16000		      1735.000		0.1084375000		0.0112018230		0.0008572737
		  32000		      3701.000		0.1156562500		0.0111492118		0.0006465381
		  64000		      7639.000		0.1193593750		0.0107855133		0.0004718094
		 128000		     16161.000		0.1262578125		0.0107364043		0.0003529013
		 256000		     32879.000		0.1284335937		0.0103135219		0.0002538392


 
-----------------------------------
|        CONCLUSION               |
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 
 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
